import GAinspector
import numpy as np
import random
from utils import *
import matplotlib.pyplot as plt


def randomGenome(length):
    """
    :param length:
    :return: string, random binary digit
    
    """
    """Your Code Here"""
    numStr = ""
    for i in range(length):
        numStr += str(np.random.randint(2))
    # print(numStr)
    return numStr
   


def makePopulation(size, length):
    """
    :param size - of population:
    :param length - of genome
    :return: list of length size containing genomes of length length
    """

    """Your Code Here"""
    listPop = []
    for i in range(size):
        listPop.append(randomGenome(length))
    # print(listPop)
    return listPop
   


def fitness(genome):
    """
    :param genome: 
    :return: the fitness value of a genome
    """
    fit = 0
    for g in genome:
        if g =="1":
            fit += 1

    return fit



   

def evaluateFitness(population):
    """
    :param population: 
    :return: a pair of values: the average fitness of the population as a whole and the fitness of the best individual in the population.
    """
    # raiseNotDefined()
    fit_list =[]
    best_fit = 0.00
    for p in population:
        fit_list.append(fitness(p))
    for f in fit_list:
        if best_fit <= f:
            best_fit = float(f)
    return [Average(fit_list), best_fit]


def crossover(genome1, genome2):
    """
    :param genome1:
    :param genome2:
    :return: two new genomes produced by crossing over the given genomes at a random crossover point.
    """
    # raiseNotDefined()
    # i  = random.randint(1, len(genome1)-2)
    i  = random.randint(1, len(genome1)-2)
    # for i in range(3):
    newGen1 = genome1[:i] + genome2[i:] 
    newGen2 = genome2[:i] + genome1[i:]
    result = [''.join(newGen1), ''.join(newGen2)]

    # print(result)
    return result


    # for g in range(1, len(genome1)):
    #     genome1[g:] =genome2[:g]


def mutate(genome, mutationRate):
    """
    :param genome:
    :param mutationRate:
    :return: a new mutated version of the given genome.
    """
    # raiseNotDefined()
    genList = list(genome)
    
    
    child = []
    for i in genList:
        if random.random()< mutationRate:
            if i =="1":
                child.append("0")
            else:
                 child.append("1")
        else:
            child.append(i)

    child = ''.join(child)
    # print(child)

    return child


def selectPair(population):
    """

    :param population:
    :return: two genomes from the given population using fitness-proportionate selection. 
    This function should use weightedChoice, which we wrote in class, as a helper function.
    """
    # raiseNotDefined()
    fit_list = []
    for g in population:
        fit_list.append(fitness(g))
    
    gen1 = weightedChoice(population, fit_list)
    gen2 = weightedChoice(population, fit_list)

    return [gen1, gen2]

    # print( sum(b))

def runGA(populationSize, crossoverRate, mutationRate, logFile=""):
    """
    
    :param populationSize: :param crossoverRate: :param mutationRate: :param logFile: :return: xt file in which to
    store the data generated by the GA, for plotting purposes. When the GA terminates, this function should return
    the generation at which the string of all ones was found.is the main GA program, which takes the population size,
    crossover rate (pc), and mutation rate (pm) as parameters. The optional logFile parameter is a string specifying
    the name of a te
    """
    
    population = makePopulation(populationSize, 20)
    
    index = 0

    file = open(logFile, "w")
    found = False

    while index < 100 and found != True:
        newPopulation = []
        
        # for i in range(len(population)):
        #     population[i] = mutate(population[i], mutationRate)

        while len(newPopulation) != populationSize:
            genome_select = []
            '''select the pair of geneome from population'''
            genome_select = selectPair(population)
            # print(len(newPopulation))
            # print(newPopulation[:6])
            '''rate dependent crossover of selected genome'''
            genome_cross = []
    
            if random.random() < crossoverRate:
                # print(random.randin())
                genome_cross = crossover(genome_select[0], genome_select[1])
    
            else:
                genome_cross = genome_select

    
            '''mutate crossoeverd genome'''
            newGen1 = mutate(genome_cross[0], mutationRate)
            newGen2 = mutate(genome_cross[1], mutationRate)


            '''add new genomee to new population after doing crossover and mutate'''
            
            newPopulation.append(newGen1)
            newPopulation.append(newGen2)

        population = newPopulation
           
        
        best_fit = evaluateFitness(newPopulation)



      
        print("Generation  {}: average fittness {:.02f}, best fitness {:.02f}".format(index, best_fit[0], best_fit[1]))

        '''write best fit to the file'''
        file.write("{} {:.02f} {:.02f}\n".format(index, best_fit[0],best_fit[1]))

        if best_fit[1] ==20:
            found = True
            return index
        
        index += 1

        
       
        
            
    file.close()

    return None







if __name__ == '__main__':
    #Testing Code
    print("Test Suite")
    # GAinspector.test(randomGenome)
    # GAinspector.test(makePopulation)
    # GAinspector.test(fitness)
    # GAinspector.test(evaluateFitness)
    # GAinspector.test(crossover)
    # GAinspector.test(mutate)
    # GAinspector.test(selectPair)
    def differentCrossoverRate(populationSize, crossoverRate, mutationRate, title):
        index = 0
        best_fit = []
        file = []
        # generation = []
        while index < 50 :
            print("Run: ", index+1)
            best_fit.append(runGA(populationSize, crossoverRate, mutationRate, f"run{index}.txt"))
            file.append(f"run{index}.txt")


            index +=1

        pick_five = []
        for i in range(5):
            pick_five.append(random.choice(file))
        # print(pick_five)

        print("Generation at which the string is one")
        print(best_fit)
        fiveRunRandom= np.zeros(5)
        color = ['green', 'red', 'blue', 'yellow', 'purple']
        fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(8,6))
        
        for idx, f in enumerate(pick_five):
            file = open(f, "r")
            generation = []
            average = []
            for index in file:
                gen, avergeFitness, fitness = index.split()
                gen = float(gen)
                avergeFitness = float(avergeFitness)
                generation.append(gen)
                average.append(avergeFitness)
        

            # print("index {} : {} ".format(idx, generation))
            # print("index {} : {} ".format(idx, average))
        
            ax.plot(generation, average, color=color[idx], label=f)

        
        ax.set_xlabel("generation", fontsize=16)
        ax.set_ylabel("Average of fitness.", fontsize=16)
        ax.set_title(title, fontsize=16)
        ax.legend()
        plt.show()

    '''run experiment for question 1 and 2'''
    differentCrossoverRate(100, 0.7, 0.001,"A Random 5 of 50 Run")
       
    '''run experiment  3'''
    # differentCrossoverRate(100, 0.0, 0.001, "A Random 5 of 50 Run with Crossover Off")


    '''run experiment 4'''
    # differentCrossoverRate(20, 0.7, 0.01, "A Random 5 of 50 Run with 20 PopulationSize")
    # differentCrossoverRate(200, 0.7, 0.01, "A Random 5 of 50 Run with 200 PopulationSize")
    # differentCrossoverRate(100, 0.01, 0.01, "A Random 5 of 50 Run with Crossover Rate 0.01")

    # differentCrossoverRate(100, 1, 0.01, "A Random 5 of 50 Run with Crossover Rate 1")
    # differentCrossoverRate(100, 0.7, 0.9, "A Random 5 of 50 Run with Mutation Rate 0.9")
    # differentCrossoverRate(100, 0.7, 0.0, "A Random 5 of 50 Run with Mutation Rate 0.0")
    









   


        

    
